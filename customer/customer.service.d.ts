import { CustomerEntity, OtpEntity, PaymentEntity, SessionEntity, UserEntity } from './customer.entity';
import { Repository } from 'typeorm';
import { Customer_ProfileDTO, CustomerDto, LoginDTO, Payment_ReceiverDTO } from './customer.dto';
import { MapperService } from './mapper.service';
import { JwtService } from '@nestjs/jwt';
import { MailerService } from '@nestjs-modules/mailer';
import { Request } from 'express';
export declare class CustomerService {
    private userRepository;
    private customerRepository;
    private paymentRepository;
    private sessionRepository;
    private otpRepository;
    private mailerService;
    private mapperService;
    private jwtService;
    constructor(userRepository: Repository<UserEntity>, customerRepository: Repository<CustomerEntity>, paymentRepository: Repository<PaymentEntity>, sessionRepository: Repository<SessionEntity>, otpRepository: Repository<OtpEntity>, mailerService: MailerService, mapperService: MapperService, jwtService: JwtService);
    get_service(): string;
    Create_Signup(signup_info: LoginDTO): Promise<any>;
    Create_Customer(customer_info: CustomerDto): Promise<any>;
    Find_Customer_By_Email(email: string): Promise<any>;
    Update_Own_Profile_Details(email: string, updated_data: Customer_ProfileDTO): Promise<any>;
    Add_Credits_Amount(email: string, paymentDTO: Payment_ReceiverDTO): Promise<any>;
    Subtract_Credits_Amount(email: string, paymentDTO: Payment_ReceiverDTO): Promise<any>;
    Wallet_to_Bank(email: string, paymentDTO: Payment_ReceiverDTO): Promise<any>;
    Update_Profile_Picture(email: string, image: string): Promise<Customer_ProfileDTO>;
    Get_Profile_Picture(email: string, res: any): Promise<any>;
    Create_Payment(email: string, payment: Payment_ReceiverDTO): Promise<any>;
    Get_All_Billing_Payment(email: string): Promise<PaymentEntity[]>;
    Get_All_Billing_Payments_By_Payment_Type(email: string, paymentType: string): Promise<PaymentEntity[]>;
    Update_Password(req: Request, password: string): Promise<any>;
    Login(login_info: LoginDTO): Promise<UserEntity>;
    ForgetPassword(email: string): Promise<any>;
    otp_verification(req: Request, otp: string): Promise<any>;
    navbar(email: string): Promise<any>;
    getUserByEmail(email: string): Promise<UserEntity>;
    addToBlacklist(token: string, date_time: string, email: string): Promise<any>;
    get_token_by_token(token: string): Promise<any>;
    create_token(payload: LoginDTO): Promise<any>;
    decode_token(token: string): Promise<any>;
    Send_Email(emailTo: string, emailSubject: string, emailBody: string): Promise<any>;
    Generate_OTP(): Promise<any>;
    private extractTokenFromHeader;
    get_user_from_Request(req: Request): Promise<UserEntity>;
    calculate_charge(amount: number): Promise<number>;
    updateCustomer_SingleInfo(id: number, column: string, data: any): Promise<void>;
    get_current_timestamp(): Promise<string>;
    user_validity(email: string, password: string): Promise<boolean>;
}
